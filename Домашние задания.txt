Тест 1. 

Сделать класс MainClass.
В классе MainClass сделать метод, который возвращает 
число 14 (назвать: getLocalNumber).

Сделать класс MainClassTest.
В классе MainClassTest написать тест, проверяющий, что метод getLocalNumber 
возвращает число 14 (назвать: testGetLocalNumber).

Не забываем в проверку добавлять понятный текст ошибки.

Результат выполнения закоммитить в репозиторий на гитхаб 
и прислать ссылку на коммит.

----------------------------------------------------

Тест 2.

Сделать класс MainClass (если еще нет).
Сделать в классе MainClass приватное поле класса, 
которое равно 20 (назвать: class_number), 
и публичный метод (getClassNumber), который эту переменную возвращает.

Сделать класс MainClassTest (если еще нет).
В классе MainClassTest написать тест (назвать testGetClassNumber), который 
проверяет, что метод getClassNumber возвращает число больше 45.

Не забываем в проверку добавлять понятный текст ошибки.

Результат выполнения закоммитить в репозиторий на гитхаб и прислать ссылку 
на коммит.

----------------------------------------------------

Тест 3.

Сделать класс MainClass (если еще нет).
Сделать в классе MainClass приватное поле класса, которое равно строке
“Hello, world” (назвать: class_string),
и публичный метод (назвать: getClassString), который возвращает строку.

Сделать класс MainClassTest (если еще нет).
В классе MainClassTest написать тест (назвать testGetClassString), который
проверяет, что метод getClassString возвращает строку, в которой есть
подстрока “hello” или “Hello”, если нет ни одной из подстрок - тест падает.

Не забываем в проверку добавлять понятный текст ошибки.

Результат выполнения закоммитить в репозиторий на гитхаб и прислать ссылку
на коммит.

----------------------------------------------------

Ex1: Конфигурация инструментов.

Установить и настроить все инструменты, указанные в занятии.
Создать файловую структуру. 
Запустить тесты и убедиться в отсутствии ошибок. Создать репозиторий на 
гитхабе и закоммитить в гит созданный проект. В ответе прислать txt файл, 
в котором содержится ссылка на коммит с проектом.

Важно: ваш код должен работать, то есть компилироваться и выполнять все 
необходимые функции. Если это не так - обратитесь за помощью в чат. 
Мы не проверяем код на работоспособность. При проверке задания мы смотрим 
на качество кода. Если ваш код не работает — задание не засчитывается. 

Внимание! Проверка задания происходит автоматически! 
Не пытайтесь заранее оптимизировать структуру и добавить в неё 
что-то своё: вам будет сложнее в дальнейшем, когда мы будем подключать Appium. 
Да и в целом premature optimization заниматься не нужно.

----------------------------------------------------

Ex2: Создание метода.

Написать функцию, которая проверяет наличие текста "Search…" в строке поиска
перед вводом текста и помечает тест упавшим, если такого текста нет.

Результат выполнения задания нужно отдельным коммитом положить в git. В качестве
ответа прислать txt файл со ссылкой на коммит. Если вам потребовалось несколько
коммитов для выполнения одного задания - присылайте ссылки на все эти коммиты
с комментариями.

----------------------------------------------------

Ex3: Тест: отмена поиска.

Написать тест, который:
1. Ищет какое-то слово.
2. Убеждается, что найдено несколько статей.
3. Отменяет поиск.
4. Убеждается, что результат поиска пропал.

Результат выполнения задания нужно отдельным коммитом положить в git. В качестве
ответа прислать txt файл со ссылкой на коммит. Если вам потребовалось несколько
коммитов для выполнения одного задания - присылайте ссылки на все эти коммиты
с комментариями.

----------------------------------------------------

Ex4: Тест: проверка слов в поиске.

Написать тест, который:
1. Ищет какое-то слово.
2. Убеждается, что в каждом результате поиска есть это слово.

Результат выполнения задания нужно отдельным коммитом положить в git. В качестве
ответа прислать txt файл со ссылкой на коммит. Если вам потребовалось несколько
коммитов для выполнения одного задания - присылайте ссылки на все эти коммиты
с комментариями.

----------------------------------------------------

Ex5: Тест: сохранение двух статей.

Написать тест, который:
1. Сохраняет две статьи в одну папку.
2. Удаляет одну из статей.
3. Убеждается, что вторая осталась.
4. Переходит в неё и убеждается, что title совпадает.

----------------------------------------------------

Ex6: Тест: assert title.

Написать тест, который открывает статью и убеждается, что у нее есть
элемент title. Важно: тест не должен дожидаться появления title, проверка должна
производиться сразу. Если title не найден - тест падает с ошибкой.
Метод можно назвать assertElementPresent.

----------------------------------------------------

Ex7: Поворот экрана.

Appium устроен так, что может сохранить у себя в памяти поворот экрана, который
использовался в предыдущем тесте, и начать новый тест с тем же поворотом.
Мы написали тест на поворот экрана, и он может сломаться до того, как положение
экрана восстановится. Следовательно, если мы запустим несколько тестов
одновременно, последующие тесты будут выполняться в неправильном положении
экрана, что может привести к незапланированным проблемам.

Как нам сделать так, чтобы после теста на поворот экрана сам экран всегда
оказывался в правильном положении, даже если тест упал в тот момент,
когда экран был наклонен?

----------------------------------------------------

Ex8: Рефакторинг тестов.

Отрефакторить тесты, написанные в предыдущих занятиях (Ex3, Ex5, Ex6)
под текущую структуру тестов.

Результат выполнения задания нужно отдельным коммитом положить в git. В качестве
ответа прислать txt файл со ссылкой на коммит. Если вам потребовалось несколько
коммитов для выполнения одного задания - присылайте ссылки на все эти коммиты
с комментариями.

----------------------------------------------------

Ex9: Рефакторинг темплейта.

В одном из занятий четвертого урока упоминается о методе темплейтов.
Там рассказано, как работать с локаторами, которые зависят от подстроки SUBSTRING.
В примере из теста у нас всего одна подстрока. Но подобные локаторы можно строить
с любым количеством подстрок.

В приложении Wikipedia результатом поиска является набор ссылок на статьи, и каждая
ссылка содержит как заголовок статьи, так и краткое описание. Например, для
запроса “Java” одним из результатов выдачи будет “Java (programming language)”
и описание “Object-oriented programming language”.

Задача:

1. Подобрать локатор, который находит результат поиска одновременно по заголовку
   и описанию (если заголовок или описание отличается - элемент не находится).

2. Добавить соответствующий метод в секцию TEMPLATES METHODS класса SearchPageObject.

3. В этот же класс добавить
   метод waitForElementByTitleAndDescription(String title, String description).
   Он должен дожидаться результата поиска по двум строкам - по заголовку и описанию.
   Если такой элемент не появляется, тест должен упасть с читаемой и понятной ошибкой.

4. Написать тест, который будет делать поиск по любому запросу на ваш выбор (поиск по
   этому слову должен возвращать как минимум 3 результата). Далее тест должен убеждаться,
   что первые три результата присутствуют в результате поиска.

Результатом выполнения задания должен быть дифф к коду, который был написан на
четвертом занятий. В этом диффе должны быть вспомогательные методы, лежащие в
соответствующих классах и код теста, лежащего в соответствующем классе.
Тест должен работать (т.е. проходить при верном результате поиска и обязательно падать,
если результат поиска изменился).

В качестве ответа прислать txt файл со ссылкой на коммит. Если вам потребовалось несколько
коммитов для выполнения одного задания - присылайте ссылки
на все эти коммиты с комментариями.

----------------------------------------------------

Ex10: Настройка работы на iOS.

Установить и настроить все инструменты из урока.
Поменять локаторы, прислать коммит на github.

----------------------------------------------------

Ex11: Рефакторинг тестов.

Адаптировать под iOS тест на удаление одной сохраненной статьи из двух. Вместо проверки
title-элемента придумать другой способ верификации оставшейся статьи
(т.е. способ убедиться, что осталась в сохраненных ожидаемая статья).

----------------------------------------------------

Ex12: Рефакторинг тестов.

Адаптировать по iOS тест на поиск и верификацию трех результатов выдачи поиска.

----------------------------------------------------

Ex13: Рассуждения.

Вопрос на подумать: что Вам не нравится в текущей реализации кода?
Подумать, какие минусы вы видите в том, как реализованы общие части логики для iOS и Android,
как реализованы отличные друг от друга части логики. Какие сложности вы видите в написании
новых тестов при текущей архитектуре? Какие сложности вы видите в поддержке существующего
набора тестов? В идеале - предложить свою идею
архитектуры тестового фреймворка под iOS и Android.

----------------------------------------------------

Ex14: Свит для Android.

Установить и настроить все инструменты, указанные в занятии. Запустить тесты
и убедиться в отсутствии ошибок.

Создать item для запуска suite тестов на Android. В качестве ответа прислать
скриншот настройкой item.

----------------------------------------------------

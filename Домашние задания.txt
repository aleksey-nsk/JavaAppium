Тест 1. 

Сделать класс MainClass.
В классе MainClass сделать метод, который возвращает 
число 14 (назвать: getLocalNumber).

Сделать класс MainClassTest.
В классе MainClassTest написать тест, проверяющий, что метод getLocalNumber 
возвращает число 14 (назвать: testGetLocalNumber).

Не забываем в проверку добавлять понятный текст ошибки.

Результат выполнения закоммитить в репозиторий на гитхаб 
и прислать ссылку на коммит.

----------------------------------------------------

Тест 2.

Сделать класс MainClass (если еще нет).
Сделать в классе MainClass приватное поле класса, 
которое равно 20 (назвать: class_number), 
и публичный метод (getClassNumber), который эту переменную возвращает.

Сделать класс MainClassTest (если еще нет).
В классе MainClassTest написать тест (назвать testGetClassNumber), который 
проверяет, что метод getClassNumber возвращает число больше 45.

Не забываем в проверку добавлять понятный текст ошибки.

Результат выполнения закоммитить в репозиторий на гитхаб и прислать ссылку 
на коммит.

----------------------------------------------------

Тест 3.

Сделать класс MainClass (если еще нет).
Сделать в классе MainClass приватное поле класса, которое равно строке
“Hello, world” (назвать: class_string),
и публичный метод (назвать: getClassString), который возвращает строку.

Сделать класс MainClassTest (если еще нет).
В классе MainClassTest написать тест (назвать testGetClassString), который
проверяет, что метод getClassString возвращает строку, в которой есть
подстрока “hello” или “Hello”, если нет ни одной из подстрок - тест падает.

Не забываем в проверку добавлять понятный текст ошибки.

Результат выполнения закоммитить в репозиторий на гитхаб и прислать ссылку
на коммит.

----------------------------------------------------

Ex1: Конфигурация инструментов.

Установить и настроить все инструменты, указанные в занятии.
Создать файловую структуру. 
Запустить тесты и убедиться в отсутствии ошибок. Создать репозиторий на 
гитхабе и закоммитить в гит созданный проект. В ответе прислать txt файл, 
в котором содержится ссылка на коммит с проектом.

Важно: ваш код должен работать, то есть компилироваться и выполнять все 
необходимые функции. Если это не так - обратитесь за помощью в чат. 
Мы не проверяем код на работоспособность. При проверке задания мы смотрим 
на качество кода. Если ваш код не работает — задание не засчитывается. 

Внимание! Проверка задания происходит автоматически! 
Не пытайтесь заранее оптимизировать структуру и добавить в неё 
что-то своё: вам будет сложнее в дальнейшем, когда мы будем подключать Appium. 
Да и в целом premature optimization заниматься не нужно.

----------------------------------------------------

Ex2: Создание метода.

Написать функцию, которая проверяет наличие текста "Search…" в строке поиска
перед вводом текста и помечает тест упавшим, если такого текста нет.

Результат выполнения задания нужно отдельным коммитом положить в git. В качестве
ответа прислать txt файл со ссылкой на коммит. Если вам потребовалось несколько
коммитов для выполнения одного задания - присылайте ссылки на все эти коммиты
с комментариями.

----------------------------------------------------

Ex3: Тест: отмена поиска.

Написать тест, который:
1. Ищет какое-то слово.
2. Убеждается, что найдено несколько статей.
3. Отменяет поиск.
4. Убеждается, что результат поиска пропал.

Результат выполнения задания нужно отдельным коммитом положить в git. В качестве
ответа прислать txt файл со ссылкой на коммит. Если вам потребовалось несколько
коммитов для выполнения одного задания - присылайте ссылки на все эти коммиты
с комментариями.

----------------------------------------------------
